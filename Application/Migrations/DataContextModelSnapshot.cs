// <auto-generated />
using System;
using Application.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Application.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Application.Model.Category", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("predefinedCategoryType")
                        .HasColumnType("int");

                    b.Property<int>("productCounts")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Application.Model.Competition", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("competitorCounts")
                        .HasColumnType("int");

                    b.Property<DateTime>("endTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isUserAttend")
                        .HasColumnType("bit");

                    b.Property<DateTime>("startTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("stateId")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("totalCount")
                        .HasColumnType("int");

                    b.Property<int>("yourPoint")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.HasIndex("stateId");

                    b.ToTable("competitions");
                });

            modelBuilder.Entity("Application.Model.Credit", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.ToTable("credits");
                });

            modelBuilder.Entity("Application.Model.EventType", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.ToTable("eventType");
                });

            modelBuilder.Entity("Application.Model.File", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<byte[]>("content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("fileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.ToTable("file");
                });

            modelBuilder.Entity("Application.Model.FriendInvitation", b =>
                {
                    b.Property<int>("invitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("invitationId"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isMale")
                        .HasColumnType("bit");

                    b.Property<string>("moblie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("recivedPoint")
                        .HasColumnType("int");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("invitationId");

                    b.HasIndex("UserId");

                    b.ToTable("friendInvitations");
                });

            modelBuilder.Entity("Application.Model.Friends", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("totalCount")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.ToTable("friends");
                });

            modelBuilder.Entity("Application.Model.GeneralInfo", b =>
                {
                    b.Property<int>("generalInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("generalInfoId"));

                    b.Property<int>("creditId")
                        .HasColumnType("int");

                    b.Property<int>("remainingDays")
                        .HasColumnType("int");

                    b.Property<int>("totalAsset")
                        .HasColumnType("int");

                    b.Property<int>("totalCash")
                        .HasColumnType("int");

                    b.Property<int>("totalStock")
                        .HasColumnType("int");

                    b.HasKey("generalInfoId");

                    b.HasIndex("creditId")
                        .IsUnique();

                    b.ToTable("generalinfos");
                });

            modelBuilder.Entity("Application.Model.Grade", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("colorHex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isMaxInfinity")
                        .HasColumnType("bit");

                    b.Property<int>("max")
                        .HasColumnType("int");

                    b.Property<int>("min")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.ToTable("grades");
                });

            modelBuilder.Entity("Application.Model.InvitationStatistics", b =>
                {
                    b.Property<int>("invitationStatisticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("invitationStatisticsId"));

                    b.Property<int>("acceptedCount")
                        .HasColumnType("int");

                    b.Property<int>("idUser")
                        .HasColumnType("int");

                    b.Property<int>("totalInvitationPoint")
                        .HasColumnType("int");

                    b.Property<int>("totalSentInvitationCount")
                        .HasColumnType("int");

                    b.Property<int>("waitingCount")
                        .HasColumnType("int");

                    b.HasKey("invitationStatisticsId");

                    b.HasIndex("idUser")
                        .IsUnique();

                    b.ToTable("invitationStatistics");
                });

            modelBuilder.Entity("Application.Model.PointInfo", b =>
                {
                    b.Property<string>("pointId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("activeLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("activeLevelPercentage")
                        .HasColumnType("int");

                    b.Property<int>("point")
                        .HasColumnType("int");

                    b.Property<int>("pointsToLevel")
                        .HasColumnType("int");

                    b.Property<string>("profileId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("pointId");

                    b.HasIndex("profileId")
                        .IsUnique();

                    b.ToTable("pointInfos");
                });

            modelBuilder.Entity("Application.Model.PointState", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.ToTable("pointState");
                });

            modelBuilder.Entity("Application.Model.PortfoloItems", b =>
                {
                    b.Property<int>("portfoloItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("portfoloItemId"));

                    b.Property<int?>("Creditid")
                        .HasColumnType("int");

                    b.Property<int>("idOfCredit")
                        .HasColumnType("int");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("value")
                        .HasColumnType("int");

                    b.HasKey("portfoloItemId");

                    b.HasIndex("Creditid");

                    b.HasIndex("idOfCredit");

                    b.ToTable("portfolioItems");
                });

            modelBuilder.Entity("Application.Model.Profile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("profiles");
                });

            modelBuilder.Entity("Application.Model.Reward", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("categoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isFavorite")
                        .HasColumnType("bit");

                    b.Property<string>("miniDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("point")
                        .HasColumnType("int");

                    b.Property<int>("sellCount")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.ToTable("rewards");
                });

            modelBuilder.Entity("Application.Model.RewardDetails", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rewardId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.ToTable("rewardDetails");
                });

            modelBuilder.Entity("Application.Model.SortType", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("key"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("persianName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("key");

                    b.ToTable("sortTypes");
                });

            modelBuilder.Entity("Application.Model.State", b =>
                {
                    b.Property<int>("stateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("stateId"));

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("stateId");

                    b.HasIndex("stateId")
                        .IsUnique();

                    b.ToTable("states");
                });

            modelBuilder.Entity("Application.Model.TransactionType", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.ToTable("transactionType");
                });

            modelBuilder.Entity("Application.Model.TurnOverDataBase", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("eventType")
                        .HasColumnType("int");

                    b.Property<int>("point")
                        .HasColumnType("int");

                    b.Property<int>("state")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("transactionType")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("turnOvers");
                });

            modelBuilder.Entity("Application.Model.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("mobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("otp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("otpExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("Application.Model.Competition", b =>
                {
                    b.HasOne("Application.Model.State", "state")
                        .WithMany()
                        .HasForeignKey("stateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("state");
                });

            modelBuilder.Entity("Application.Model.FriendInvitation", b =>
                {
                    b.HasOne("Application.Model.Friends", null)
                        .WithMany("friendInvitations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Application.Model.GeneralInfo", b =>
                {
                    b.HasOne("Application.Model.Credit", null)
                        .WithOne("generalInfo")
                        .HasForeignKey("Application.Model.GeneralInfo", "creditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Application.Model.InvitationStatistics", b =>
                {
                    b.HasOne("Application.Model.Friends", null)
                        .WithOne("invitationStatistics")
                        .HasForeignKey("Application.Model.InvitationStatistics", "idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Application.Model.PointInfo", b =>
                {
                    b.HasOne("Application.Model.Profile", null)
                        .WithOne("pointInfo")
                        .HasForeignKey("Application.Model.PointInfo", "profileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Application.Model.PortfoloItems", b =>
                {
                    b.HasOne("Application.Model.Credit", null)
                        .WithMany("top5Items")
                        .HasForeignKey("Creditid");

                    b.HasOne("Application.Model.Credit", null)
                        .WithMany("portfoloItems")
                        .HasForeignKey("idOfCredit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Application.Model.Profile", b =>
                {
                    b.HasOne("Application.Model.User", null)
                        .WithOne("profile")
                        .HasForeignKey("Application.Model.Profile", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Application.Model.Credit", b =>
                {
                    b.Navigation("generalInfo")
                        .IsRequired();

                    b.Navigation("portfoloItems");

                    b.Navigation("top5Items");
                });

            modelBuilder.Entity("Application.Model.Friends", b =>
                {
                    b.Navigation("friendInvitations");

                    b.Navigation("invitationStatistics")
                        .IsRequired();
                });

            modelBuilder.Entity("Application.Model.Profile", b =>
                {
                    b.Navigation("pointInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Application.Model.User", b =>
                {
                    b.Navigation("profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
